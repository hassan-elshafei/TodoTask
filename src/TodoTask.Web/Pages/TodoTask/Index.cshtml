@page
@model TodoTask.Pages.TodoTask.IndexModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Todo Tasks";
}

@Html.AntiForgeryToken()

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h3 class="mb-0">Todo Tasks</h3>
                <button class="btn btn-success" onclick="openCreateModal()">
                    <i class="fas fa-plus"></i> Add Task
                </button>
            </div>
        </div>

        <div class="card-body">
            <form method="get" class="row g-3 mb-4">
                <div class="col-md-3">
                    <label class="form-label">Status</label>
                    <select asp-for="Filter.Status" asp-items="Model.StatusOptions" class="form-select">
                        <option value="">All Statuses</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Priority</label>
                    <select asp-for="Filter.Priority" asp-items="Model.PriorityOptions" class="form-select">
                        <option value="">All Priorities</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">From Date</label>
                    <input type="date" asp-for="Filter.From" class="form-control" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">To Date</label>
                    <input type="date" asp-for="Filter.To" class="form-control" />
                </div>
                <div class="col-md-12 d-flex gap-2">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-filter"></i> Filter
                    </button>
                    <a href="./Index" class="btn btn-outline-secondary">
                        <i class="fas fa-sync-alt"></i> Reset
                    </a>
                </div>
            </form>

            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Title</th>
                            <th>Description</th>
                            <th>Priority</th>
                            <th>Status</th>
                            <th>Due Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Todos)
                        {
                            <tr id="task-@item.Id">
                                <td>@item.Title</td>
                                <td>@(item.Description?.Length > 50 ? item.Description.Substring(0, 50) + "..." : item.Description)</td>
                                <td>
                                    <span class="badge @GetPriorityBadgeClass(item.Priority)">
                                        @item.Priority
                                    </span>
                                </td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(item.Status)">
                                        @item.Status
                                    </span>
                                </td>
                                <td>@item.DueDate?.ToString("d")</td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-primary" onclick="openEditModal('@item.Id')">
                                            <i class="fas fa-edit"></i> Edit
                                        </button>
                                        @if (item.Status != "Completed")
                                        {
                                            <button class="btn btn-sm btn-success" onclick="confirmComplete('@item.Id')">
                                                <i class="fas fa-check"></i> Complete
                                            </button>
                                        }
                                        <button class="btn btn-sm btn-danger" onclick="confirmDelete('@item.Id')">
                                            <i class="fas fa-trash"></i> Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Main Modal -->
<div class="modal fade" id="todoModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" id="modalContent">
            <!-- Content loaded via AJAX -->
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="confirmModalBody">
                Are you sure you want to perform this action?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmAction">Confirm</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
    <style>
        .badge {
            font-size: 0.9em;
            padding: 5px 10px;
        }
    </style>
}

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        // Initialize modals
        const todoModal = new bootstrap.Modal(document.getElementById('todoModal'));
        const confirmModal = new bootstrap.Modal(document.getElementById('confirmModal'));

        // Current action state
        let currentAction = null;
        let currentId = null;

        function openCreateModal() {
            $.get("?handler=CreateForm", function (html) {
                $('#modalContent').html(html);
                todoModal.show();
            }).fail(function (xhr) {
                showError(xhr.responseText || "Failed to load create form");
            });
        }

        function openEditModal(id) {
            $.get("?handler=EditForm&id=" + id, function (html) {
                $('#modalContent').html(html);
                todoModal.show();
            }).fail(function (xhr) {
                showError(xhr.responseText || "Failed to load edit form");
            });
        }

        function confirmDelete(id) {
            currentAction = 'Delete';
            currentId = id;
            $('#confirmModalBody').html('Are you sure you want to delete this task? This action cannot be undone.');
            confirmModal.show();
        }

        function confirmComplete(id) {
            currentAction = 'Complete';
            currentId = id;
            $('#confirmModalBody').html('Are you sure you want to mark this task as complete?');
            confirmModal.show();
        }

        // Handle form submission
        $(document).on('submit', '#todoForm', function (e) {
            e.preventDefault();
            const form = $(this);
            const submitButton = form.find('button[type="submit"]');
            const originalText = submitButton.html();

            submitButton.prop('disabled', true);
            submitButton.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...');

            $.ajax({
                url: '?handler=SaveTodo',
                method: 'POST',
                data: form.serialize(),
                headers: {
                    "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (result) {
                    if (result.success) {
                        todoModal.hide();
                        showSuccess('Task saved successfully');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        $('#modalContent').html(result);
                    }
                },
                error: function (xhr) {
                    showError(xhr.responseJSON?.error || "Failed to save task");
                },
                complete: function () {
                    submitButton.prop('disabled', false);
                    submitButton.html(originalText);
                }
            });
        });

        // Handle confirmation
        $('#confirmAction').click(function () {
            confirmModal.hide();
            const button = $(this);
            const originalText = button.html();

            button.prop('disabled', true);
            button.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...');

            $.ajax({
                url: `?handler=${currentAction}`,
                method: 'POST',
                data: { id: currentId },
                headers: {
                    "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val(),
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                success: function (response) {
                    if (response.success) {
                        showSuccess(`Task ${currentAction.toLowerCase()}d successfully`);
                        if (currentAction === 'Delete') {
                            $(`#task-${currentId}`).remove();
                        } else if (currentAction === 'Complete') {
                            const row = $(`#task-${currentId}`);
                            row.find('.badge').removeClass('bg-info bg-warning').addClass('bg-success').text('Completed');
                            row.find('.btn-success').remove();
                        }
                    } else {
                        showError(response.error || `Failed to ${currentAction.toLowerCase()} task`);
                    }
                },
                error: function (xhr) {
                    showError(xhr.responseJSON?.error || `Failed to ${currentAction.toLowerCase()} task`);
                },
                complete: function () {
                    button.prop('disabled', false);
                    button.html(originalText);
                }
            });
        });

        // Helper functions
        function showSuccess(message) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: message,
                timer: 2000,
                showConfirmButton: false
            });
        }

        function showError(message) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: message
            });
        }
    </script>
}

@functions {
    string GetPriorityBadgeClass(string priority)
    {
        return priority switch
        {
            "High" => "bg-danger",
            "Medium" => "bg-primary",
            "Low" => "bg-secondary",
            _ => "bg-light text-dark"
        };
    }

    string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Completed" => "bg-success",
            "InProgress" => "bg-warning",
            "Pending" => "bg-info",
            _ => "bg-light text-dark"
        };
    }
}